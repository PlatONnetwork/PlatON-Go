package network.platon.test.evm.beforetest;

import org.web3j.crypto.Credentials;
import org.web3j.crypto.RawTransaction;
import org.web3j.crypto.TransactionEncoder;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.Web3jService;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.response.PlatonGetTransactionCount;
import org.web3j.protocol.core.methods.response.PlatonSendTransaction;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.exceptions.TransactionException;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.response.PollingTransactionReceiptProcessor;
import org.web3j.utils.Numeric;

import java.io.IOException;
import java.math.BigInteger;

public class BaseLibrary {
	protected static final BigInteger GAS_LIMIT = BigInteger.valueOf(4700000);
	protected static final BigInteger GAS_PRICE = BigInteger.valueOf(1000000000L);

	public static final int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;
	public static final long DEFAULT_POLLING_FREQUENCY = 2 * 1000;

	private Credentials credentials;
	private Web3j web3j;
	private long chainId;

	public BaseLibrary(Credentials credentials, Web3j web3j, long chainId) {
		this.credentials = credentials;
		this.web3j = web3j;
		this.chainId = chainId;
	}

	public TransactionReceipt deploy(BigInteger gasPrice, BigInteger gasLimit, String data) throws Exception {
		PlatonGetTransactionCount platonGetTransactionCount = web3j
				.platonGetTransactionCount(credentials.getAddress(chainId), DefaultBlockParameterName.LATEST).send();
		BigInteger nonce = platonGetTransactionCount.getTransactionCount();

		String to = "";
		BigInteger value = BigInteger.valueOf(0L);
		RawTransaction rawTransaction = RawTransaction.createTransaction(nonce, gasPrice, gasLimit, to, value, data);

		byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, chainId, credentials);
		String hexValue = Numeric.toHexString(signedMessage);
		PlatonSendTransaction platonSendTransaction = web3j.platonSendRawTransaction(hexValue).send();

		return processResponse(platonSendTransaction);
	}

	private TransactionReceipt processResponse(PlatonSendTransaction transactionResponse) throws IOException, TransactionException {
		if (transactionResponse.hasError()) {
			throw new RuntimeException("Error processing transaction request: " + transactionResponse.getError().getMessage());
		}

		String transactionHash = transactionResponse.getTransactionHash();

		return new PollingTransactionReceiptProcessor(web3j, DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH)
				.waitForTransactionReceipt(transactionHash);
	}

	public static void main(String[] args) throws Exception {
		long chainId = 100L;
		String nodeUrl = "http://10.1.1.1:8801";
		String privateKey = "11e20dc277fafc4bc008521adda4b79c2a9e403131798c94eacb071005d43532";

		Credentials credentials = Credentials.create(privateKey);
		Web3jService web3jService = new HttpService(nodeUrl);
		Web3j web3j = Web3j.build(web3jService);

		BaseLibrary baseLibrary = new BaseLibrary(credentials, web3j, chainId);
		String data = "608060405234801561001057600080fd5b50610827806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80638f39654914610051578063d4d7306b14610112578063e4e50f7814610264578063e78855a814610343575b600080fd5b6100976004803603602081101561006757600080fd5b81019080803576ffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610477565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100d75780820151818401526020810190506100bc565b50505050905090810190601f1680156101045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102626004803603604081101561012857600080fd5b810190808035906020019064010000000081111561014557600080fd5b82018360208201111561015757600080fd5b8035906020019184600183028401116401000000008311171561017957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101dc57600080fd5b8201836020820111156101ee57600080fd5b8035906020019184600183028401116401000000008311171561021057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610560565b005b6103416004803603604081101561027a57600080fd5b81019080803576ffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803590602001906401000000008111156102bb57600080fd5b8201836020820111156102cd57600080fd5b803590602001918460018302840111640100000000831117156102ef57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506105e2565b005b6103fc6004803603602081101561035957600080fd5b810190808035906020019064010000000081111561037657600080fd5b82018360208201111561038857600080fd5b803590602001918460018302840111640100000000831117156103aa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610642565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043c578082015181840152602081019050610421565b50505050905090810190601f1680156104695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600160008376ffffffffffffffffffffffffffffffffffffffffffffff191676ffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105545780601f1061052957610100808354040283529160200191610554565b820191906000526020600020905b81548152906001019060200180831161053757829003601f168201915b50505050509050919050565b806000836040518082805190602001908083835b602083106105975780518252602082019150602081019050602083039250610574565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090805190602001906105dd92919061074d565b505050565b80600160008476ffffffffffffffffffffffffffffffffffffffffffffff191676ffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020908051906020019061063d92919061074d565b505050565b60606000826040518082805190602001908083835b6020831061067a5780518252602082019150602081019050602083039250610657565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107415780601f1061071657610100808354040283529160200191610741565b820191906000526020600020905b81548152906001019060200180831161072457829003601f168201915b50505050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061078e57805160ff19168380011785556107bc565b828001600101855582156107bc579182015b828111156107bb5782518255916020019190600101906107a0565b5b5090506107c991906107cd565b5090565b6107ef91905b808211156107eb5760008160009055506001016107d3565b5090565b9056fea265627a7a72315820d47de161b5fdeef80faf8609f1d6cf0ffe10e042616f09c69627196e8a1ef92464736f6c634300050d0032";
		TransactionReceipt receipt = baseLibrary.deploy(BaseLibrary.GAS_PRICE, BaseLibrary.GAS_LIMIT, data);
        if(receipt.getStatus().toString().equals("0x1")){
            System.err.println("status >>>> " + receipt.getStatus()+"合约部署成功");
        }else{
            System.err.println("status >>>> " + receipt.getStatus()+"合约部署失败");
        }
		System.err.println("contract address >>>> " + receipt.getContractAddress());
	}
}
